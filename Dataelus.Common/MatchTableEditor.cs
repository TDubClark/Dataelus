using System;
using System.Collections.Generic;
using System.Linq;

namespace Dataelus
{
	/// <summary>
	/// Row added event handler.
	/// </summary>
	public delegate void RowAddedEventHandler (object sender, RowAddedEventArgs args);

	/// <summary>
	/// Column added event handler.
	/// </summary>
	public delegate void ColumnAddedEventHandler (object sender, ColumnAddedEventArgs args);

	/// <summary>
	/// Row added event arguments.
	/// </summary>
	public class RowAddedEventArgs : EventArgs
	{
		/// <summary>
		/// Gets or sets the row added.
		/// </summary>
		/// <value>The row added.</value>
		public object RowAdded { get; set; }

		public RowAddedEventArgs (object rowAdded)
		{
			this.RowAdded = rowAdded;
		}

		public override string ToString ()
		{
			return string.Format ("[RowAddedEventArgs: RowAdded={0}]", RowAdded);
		}
	}

	/// <summary>
	/// Column added event arguments.
	/// </summary>
	public class ColumnAddedEventArgs : EventArgs
	{
		/// <summary>
		/// Gets or sets the column added.
		/// </summary>
		/// <value>The column added.</value>
		public object ColumnAdded { get; set; }

		public ColumnAddedEventArgs (object columnAdded)
		{
			this.ColumnAdded = columnAdded;
		}

		public override string ToString ()
		{
			return string.Format ("[ColumnAddedEventArgs: ColumnAdded={0}]", ColumnAdded);
		}
	}

	/*
	 * The purpose of this class is essentially a cross-tab editor
	 * This version revolved around objects, but a better version would work with ObjectTables
	 * 
	 * This version:
	 * Takes a collection of row and column objects, and uses an intersector to match them up
	 * 
	 * With object tables, we would not necessarily need a supplied equality comparer between rows
	 *  - we would just need which columns to compare, and (optionally) any special comparers for those columns
	 * 
	 */

	/// <summary>
	/// Match table editor; for editing a table or collection of matches between two other records or objects.
	/// </summary>
	public class MatchTableEditor
	{
		/// <summary>
		/// The list of row-objects.
		/// </summary>
		protected IdentifiedList _RowList;

		/// <summary>
		/// Gets or sets the row list.
		/// </summary>
		/// <value>The row list.</value>
		public IdentifiedList RowList {
			get { return _RowList; }
			set { _RowList = value; }
		}

		/// <summary>
		/// The list of column-objects.
		/// </summary>
		protected IdentifiedList _ColumnList;

		/// <summary>
		/// Gets or sets the column list.
		/// </summary>
		/// <value>The column list.</value>
		public IdentifiedList ColumnList {
			get { return _ColumnList; }
			set { _ColumnList = value; }
		}

		/// <summary>
		/// The intersector object - determines the intersection of row objects and column objects.
		/// </summary>
		protected IIntersectionValue _Intersector;

		/// <summary>
		/// Gets or sets the intersector.
		/// </summary>
		/// <value>The intersector.</value>
		public IIntersectionValue Intersector {
			get { return _Intersector; }
			set { _Intersector = value; }
		}

		/// <summary>
		/// Occurs when a row is added.
		/// </summary>
		public event RowAddedEventHandler RowAdded;

		/// <summary>
		/// Occurs when a column is added.
		/// </summary>
		public event ColumnAddedEventHandler ColumnAdded;

		/// <summary>
		/// Raises the row added event.
		/// </summary>
		/// <param name="row">Row.</param>
		public void OnRowAdded (object row)
		{
			if (RowAdded != null)
				RowAdded (this, new RowAddedEventArgs (row));
		}

		/// <summary>
		/// Raises the column added event.
		/// </summary>
		/// <param name="column">Column.</param>
		public void OnColumnAdded (object column)
		{
			if (ColumnAdded != null)
				ColumnAdded (this, new ColumnAddedEventArgs (column));
		}

		/// <summary>
		/// Adds the row.
		/// </summary>
		/// <param name="row">Row.</param>
		public virtual void AddRow (object row)
		{
			_RowList.Add (row);
			OnRowAdded (row);
		}

		/// <summary>
		/// Adds the column.
		/// </summary>
		/// <param name="column">Column.</param>
		public virtual void AddColumn (object column)
		{
			_ColumnList.Add (column);
			OnColumnAdded (column);
		}

		/// <summary>
		/// Gets the cross-tab table object.
		/// </summary>
		/// <returns>The cross tab.</returns>
		/// <param name="columnSorter">Column sorter.</param>
		public virtual Table.ObjectTable GetCrossTab (IComparer<object> columnSorter)
		{
			return CreateCrossTabTable (columnSorter);
		}

		/// <summary>
		/// Sets Intersect using the given cross-tab table object; this must be the same instance produced by GetCrossTab(); uses the CustomTag of the row and column as the unique ID of the RowList and ColumnList, respectively.
		/// </summary>
		/// <param name="table">The cross-tab table (should be generated by method GetCrossTab).</param>
		public virtual void SetCrossTab (Table.ObjectTable table)
		{
			foreach (var tRow in table.Rows) {
				// Try to find the row
				object row = GetRowByTag (tRow.CustomTag);

				foreach (var tCol in table.Columns) {
					// Find the column
					object column = GetColumnByTag (tCol.CustomValueTag);

					_Intersector.SetIntersect (row, column, tRow [tCol.ColumnIndex]);
				}
			}
		}

		/// <summary>
		/// Gets the row by the given tag (which should be an Int64); if not found, throws exception.
		/// </summary>
		/// <returns>The row by tag.</returns>
		/// <param name="customTag">Custom tag.</param>
		protected virtual object GetRowByTag (object customTag)
		{
			object row;
			if (!_RowList.TryGetValue ((long)customTag, out row))
				throw new Exception (String.Format ("Could not find row item by custom tag: '{0}'", customTag));
			return row;
		}

		/// <summary>
		/// Gets the column by the given tag (which should be an Int64); if not found, throws exception.
		/// </summary>
		/// <returns>The column by tag.</returns>
		/// <param name="customTag">Custom tag.</param>
		protected virtual object GetColumnByTag (object customTag)
		{
			object column;
			if (!_ColumnList.TryGetValue ((long)customTag, out column))
				throw new Exception (String.Format ("Could not find column item by custom tag: '{0}'", customTag));
			return column;
		}

		/// <summary>
		/// Creates the cross-tab table; assigns the unique ID of each Row and Column to the CustomTag of each ObjectRow and ObjectColumn.
		/// </summary>
		/// <returns>The cross tab table.</returns>
		/// <param name="columnSorter">Column sorter.</param>
		protected virtual Table.ObjectTable CreateCrossTabTable (IComparer<object> columnSorter)
		{
			var table = new Table.ObjectTable ();

			List<IdentifiedObject> rows = _RowList.ToList ();
			List<IdentifiedObject> columns = _ColumnList.ToListSorted (columnSorter);

			// Dictionary of Column IDs to Column Indexes
			var columnIds = new Dictionary<long, int> ();

			// Add the columns
			int n = 0;
			foreach (var col in columns) {
				var oColumn = table.AddColumn (new Table.ObjectColumn (n.ToString (), Table.TypeClass.Object));
				oColumn.CustomValueTag = col.UniqueID;  // Set the custom tag to the UniqueID

				columnIds.Add (col.UniqueID, oColumn.ColumnIndex);
				n++;
			}

			// Add the rows and values
			foreach (var row in rows) {
				var oRow = table.CreateRow ();
				oRow.CustomTag = row.UniqueID;  // Set the custom tag to the UniqueID

				foreach (var col in columns) {
					int colIndex;
					if (!columnIds.TryGetValue (col.UniqueID, out colIndex))
						throw new Exception (String.Format ("Column index not found for ID {0:d}", col.UniqueID));

					oRow [colIndex] = _Intersector.GetIntersect (row.Item, col.Item);
				}

				table.AddRow (oRow);
			}

			return table;
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="Dataelus.MatchTableEditor"/> class.
		/// </summary>
		public MatchTableEditor ()
		{
			_RowList = new IdentifiedList ();
			_ColumnList = new IdentifiedList ();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="Dataelus.MatchTableEditor"/> class.
		/// </summary>
		/// <param name="intersector">Intersector object - determines the value at the intersection of a row/column.</param>
		public MatchTableEditor (IIntersectionValue	intersector)
			: this ()
		{
			if (intersector == null)
				throw new ArgumentNullException ("intersector");
			
			_Intersector = intersector;
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="Dataelus.MatchTableEditor"/> class.
		/// </summary>
		/// <param name="intersector">Intersector object - determines the value at the intersection of a row/column.</param>
		/// <param name="rows">The collection of row objects.</param>
		/// <param name="columns">The collection of column objects.</param>
		public MatchTableEditor (IIntersectionValue	intersector, IEnumerable<object> rows, IEnumerable<object> columns)
			: this (intersector)
		{
			_RowList.AddRange (rows);
			_ColumnList.AddRange (columns);
		}
	}

	/// <summary>
	/// Interface for an intersection value determiner.
	/// </summary>
	public interface IIntersectionValue
	{
		/// <summary>
		/// Gets the value at the intersection of the given row and column.
		/// </summary>
		/// <returns>The intersect.</returns>
		/// <param name="row">Row.</param>
		/// <param name="column">Column.</param>
		object GetIntersect (object row, object column);

		/// <summary>
		/// Sets the value at the intersection of the given row and column.
		/// </summary>
		/// <param name="row">Row.</param>
		/// <param name="column">Column.</param>
		/// <param name="value">Value.</param>
		void SetIntersect (object row, object column, object value);
	}

	/// <summary>
	/// Stores an object pair.
	/// </summary>
	public struct ObjectPair
	{
		/// <summary>
		/// Gets or sets the row object.
		/// </summary>
		/// <value>The row object.</value>
		public object RowObject { get; set; }

		/// <summary>
		/// Gets or sets the column object.
		/// </summary>
		/// <value>The column object.</value>
		public object ColumnObject { get; set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="Dataelus.ObjectPair"/> struct.
		/// </summary>
		/// <param name="row">Row.</param>
		/// <param name="column">Column.</param>
		public ObjectPair (object row, object column)
		{
			this.RowObject = row;
			this.ColumnObject = column;
		}
	}

	/// <summary>
	/// A base object pair comparer.
	/// </summary>
	public class ObjectPairComparer : IEqualityComparer<ObjectPair>
	{
		/// <summary>
		/// Gets or sets the row comparer.
		/// </summary>
		/// <value>The row comparer.</value>
		public System.Collections.IEqualityComparer RowComparer { get; set; }

		/// <summary>
		/// Gets or sets the column comparer.
		/// </summary>
		/// <value>The column comparer.</value>
		public System.Collections.IEqualityComparer ColumnComparer { get; set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="Dataelus.ObjectPairComparer"/> class.
		/// </summary>
		/// <param name="rowComparer">Row comparer.</param>
		/// <param name="columnComparer">Column comparer.</param>
		public ObjectPairComparer (System.Collections.IEqualityComparer rowComparer, System.Collections.IEqualityComparer columnComparer)
		{
			if (columnComparer == null)
				throw new ArgumentNullException ("columnComparer");
			if (rowComparer == null)
				throw new ArgumentNullException ("rowComparer");
			
			this.RowComparer = rowComparer;
			this.ColumnComparer = columnComparer;
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="Dataelus.ObjectPairComparer"/> class.
		/// </summary>
		/// <param name="rowComparer">Row comparer.</param>
		/// <param name="columnComparer">Column comparer.</param>
		public ObjectPairComparer (IEqualityComparer<object> rowComparer, IEqualityComparer<object> columnComparer)
			: this (new EQComparer (rowComparer).AsStandard (), new EQComparer (columnComparer).AsStandard ())
		{
		}

		#region IEqualityComparer implementation

		public virtual bool Equals (ObjectPair x, ObjectPair y)
		{
			return (RowComparer.Equals (x.RowObject, y.RowObject) && ColumnComparer.Equals (x.ColumnObject, y.ColumnObject));
		}

		public virtual int GetHashCode (ObjectPair obj)
		{
			return RowComparer.GetHashCode (obj.RowObject) * ColumnComparer.GetHashCode (obj.ColumnObject);
		}

		#endregion
	}

	/// <summary>
	/// An object equality comparer.
	/// </summary>
	public class EQComparer : System.Collections.IEqualityComparer, IEqualityComparer<object>
	{
		System.Collections.IEqualityComparer _comparer1;
		IEqualityComparer<object> _comparer2;

		bool isComparer1 = false;
		bool isComparer2 = false;

		protected EQComparer ()
		{
			_comparer1 = null;
			_comparer2 = null;

			isComparer1 = false;
			isComparer2 = false;
		}

		public EQComparer (System.Collections.IEqualityComparer comparer1) : this ()
		{
			if (comparer1 == null)
				throw new ArgumentNullException ("comparer1");
			
			this._comparer1 = comparer1;
			isComparer1 = true;
		}

		public EQComparer (IEqualityComparer<object> comparer2) : this ()
		{
			if (comparer2 == null)
				throw new ArgumentNullException ("comparer2");
			
			this._comparer2 = comparer2;
			isComparer2 = true;
		}

		public System.Collections.IEqualityComparer AsStandard ()
		{
			return this;
		}

		public IEqualityComparer<object> AsGeneric ()
		{
			return this;
		}

		public bool Equals (object obj1, object obj2)
		{
			if (isComparer1)
				return _comparer1.Equals (obj1, obj2);
			if (isComparer2)
				return _comparer2.Equals (obj1, obj2);

			throw new Exception (String.Format ("Neither comparer is set."));
		}

		public int GetHashCode (object obj)
		{
			if (isComparer1)
				return _comparer1.GetHashCode (obj);
			if (isComparer2)
				return _comparer2.GetHashCode (obj);

			throw new Exception (String.Format ("Neither comparer is set."));
		}
		
	}

	/// <summary>
	/// Intersection between rows and columns yeilding a boolean value.
	/// </summary>
	public class IntersectionBoolean : IIntersectionValue
	{
		protected List<ObjectPair> _Pairs;

		/// <summary>
		/// Gets or sets the list of pairs.
		/// </summary>
		/// <value>The pairs.</value>
		public List<ObjectPair> Pairs {
			get { return _Pairs; }
			set { _Pairs = value; }
		}

		/// <summary>
		/// Adds a new pair.
		/// </summary>
		/// <param name="row">Row.</param>
		/// <param name="column">Column.</param>
		public void AddPair (object row, object column)
		{
			_Pairs.Add (new ObjectPair (row, column));
		}

		/// <summary>
		/// Gets or sets the comparer between object pairs.
		/// </summary>
		/// <value>The comparer.</value>
		public IEqualityComparer<ObjectPair> Comparer { get; set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="Dataelus.IntersectionBoolean"/> class.
		/// </summary>
		protected IntersectionBoolean ()
		{
			_Pairs = new List<ObjectPair> ();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="Dataelus.IntersectionBoolean"/> class.
		/// </summary>
		/// <param name="comparer">Comparer between row/object pairs.</param>
		public IntersectionBoolean (IEqualityComparer<ObjectPair> comparer)
			: this ()
		{
			if (comparer == null)
				throw new ArgumentNullException ("comparer");
			
			this.Comparer = comparer;
		}

		public IntersectionBoolean (IEqualityComparer<object> rowComparer, IEqualityComparer<object> columnComparer)
			: this (new ObjectPairComparer (rowComparer, columnComparer))
		{
		}

		/// <summary>
		/// Gets whether the Pairs contains the specified row and column.
		/// </summary>
		/// <param name="row">Row.</param>
		/// <param name="column">Column.</param>
		protected virtual bool Contains (object row, object column)
		{
			return _Pairs.Contains (new ObjectPair (row, column), Comparer);
		}

		/// <summary>
		/// Finds the index of the given row and column.
		/// </summary>
		/// <returns>The index.</returns>
		/// <param name="row">Row.</param>
		/// <param name="column">Column.</param>
		protected virtual int FindIndex (object row, object column)
		{
			return _Pairs.FindIndex (x => Comparer.Equals (x, new ObjectPair (row, column)));
		}

		protected virtual void AddNewItem (object row, object column)
		{
			_Pairs.Add (new ObjectPair (row, column));
		}

		protected virtual void RemoveItemAtIndex (int index)
		{
			_Pairs.RemoveAt (index);
		}

		#region IIntersectionValue implementation

		/// <summary>
		/// Gets the value at the intersection of the given row and column.
		/// </summary>
		/// <returns>The intersect.</returns>
		/// <param name="row">Row.</param>
		/// <param name="column">Column.</param>
		public virtual object GetIntersect (object row, object column)
		{
			return Contains (row, column);
		}

		/// <summary>
		/// Sets the value at the intersection of the given row and column.
		/// </summary>
		/// <param name="row">Row.</param>
		/// <param name="column">Column.</param>
		/// <param name="value">Value.</param>
		public virtual void SetIntersect (object row, object column, object value)
		{
			if ((bool)value) {
				// True: Add to list (if necessary)
				if (!Contains (row, column)) {
					AddNewItem (row, column);
				}
			} else {
				// False: Remove from list (if necessary)
				int index = FindIndex (row, column);
				if (index >= 0)
					RemoveItemAtIndex (index);
			}
		}

		#endregion
	}

	namespace Generic
	{
		/// <summary>
		/// Stores an object pair.
		/// </summary>
		public class ObjectPair<R, C>
		{
			/// <summary>
			/// Gets or sets the row object.
			/// </summary>
			/// <value>The row object.</value>
			public R RowObject { get; set; }

			/// <summary>
			/// Gets or sets the column object.
			/// </summary>
			/// <value>The column object.</value>
			public C ColumnObject { get; set; }

			/// <summary>
			/// Initializes a new instance of the <see cref="Dataelus.ObjectPair"/> struct.
			/// </summary>
			/// <param name="row">Row.</param>
			/// <param name="column">Column.</param>
			public ObjectPair (R row, C column)
			{
				this.RowObject = row;
				this.ColumnObject = column;
			}
		}

		/// <summary>
		/// Object pair value.
		/// </summary>
		public class ObjectPairValue<R, C> : ObjectPair<R, C>
		{
			public object Value { get; set; }

			public ObjectPairValue (R row, C column, object value) : base (row, column)
			{
				this.Value = value;
			}
		}

		/// <summary>
		/// A base object pair comparer.
		/// </summary>
		public class ObjectPairComparer<R, C> : IEqualityComparer<ObjectPair<R, C>>
		{
			/// <summary>
			/// Gets or sets the row comparer.
			/// </summary>
			/// <value>The row comparer.</value>
			public IEqualityComparer<R> RowComparer { get; set; }

			/// <summary>
			/// Gets or sets the column comparer.
			/// </summary>
			/// <value>The column comparer.</value>
			public IEqualityComparer<C> ColumnComparer { get; set; }

			/// <summary>
			/// Initializes a new instance of the <see cref="Dataelus.ObjectPairComparer"/> class.
			/// </summary>
			/// <param name="rowComparer">Row comparer.</param>
			/// <param name="columnComparer">Column comparer.</param>
			public ObjectPairComparer (IEqualityComparer<R> rowComparer, IEqualityComparer<C> columnComparer)
			{
				if (columnComparer == null)
					throw new ArgumentNullException ("columnComparer");
				if (rowComparer == null)
					throw new ArgumentNullException ("rowComparer");

				this.RowComparer = rowComparer;
				this.ColumnComparer = columnComparer;
			}


			#region IEqualityComparer implementation

			public bool Equals (ObjectPair<R, C> x, ObjectPair<R, C> y)
			{
				return (this.RowComparer.Equals (x.RowObject, y.RowObject) && this.ColumnComparer.Equals (x.ColumnObject, y.ColumnObject));
			}

			public int GetHashCode (ObjectPair<R, C> obj)
			{
				return RowComparer.GetHashCode (obj.RowObject) * ColumnComparer.GetHashCode (obj.ColumnObject);
			}

			#endregion
		}

		/// <summary>
		/// Intersection base.
		/// </summary>
		abstract class IntersectionBase<R, C> : IIntersectionValue
		{
			protected List<ObjectPairValue<R, C>> _Pairs;

			/// <summary>
			/// Gets or sets the list of pairs.
			/// </summary>
			/// <value>The pairs.</value>
			public List<ObjectPairValue<R, C>> Pairs {
				get { return _Pairs; }
				set { _Pairs = value; }
			}

			protected object _defaultValue;

			/// <summary>
			/// Gets or sets the default value.
			/// </summary>
			/// <value>The default value.</value>
			public object DefaultValue {
				get { return _defaultValue; }
				set { _defaultValue = value; }
			}

			/// <summary>
			/// Adds a new pair.
			/// </summary>
			/// <param name="row">Row.</param>
			/// <param name="column">Column.</param>
			public void AddPair (R row, C column)
			{
				AddPair (row, column, null);
			}

			/// <summary>
			/// Adds a new pair.
			/// </summary>
			/// <param name="row">Row.</param>
			/// <param name="column">Column.</param>
			/// <param name="value">The value</param>
			public void AddPair (R row, C column, object value)
			{
				_Pairs.Add (new ObjectPairValue<R, C> (row, column, value));
			}

			/// <summary>
			/// Gets or sets the comparer between object pairs.
			/// </summary>
			/// <value>The comparer.</value>
			public IEqualityComparer<ObjectPairValue<R, C>> Comparer { get; set; }

			/// <summary>
			/// Initializes a new instance of the <see cref="Dataelus.IntersectionBoolean"/> class.
			/// </summary>
			protected IntersectionBase ()
			{
				_Pairs = new List<ObjectPairValue<R, C>> ();
			}

			/// <summary>
			/// Initializes a new instance of the <see cref="Dataelus.IntersectionBoolean"/> class.
			/// </summary>
			/// <param name="comparer">Comparer between row/object pairs.</param>
			protected IntersectionBase (IEqualityComparer<ObjectPairValue<R, C>> comparer)
				: this ()
			{
				if (comparer == null)
					throw new ArgumentNullException ("comparer");

				this.Comparer = comparer;
			}

			protected IntersectionBase (IEqualityComparer<R> rowComparer, IEqualityComparer<C> columnComparer)
				: this (new ObjectPairComparer<R, C> (rowComparer, columnComparer))
			{
			}

			/// <summary>
			/// Gets whether the Pairs contains the specified row and column.
			/// </summary>
			/// <param name="row">Row.</param>
			/// <param name="column">Column.</param>
			protected virtual bool Contains (R row, C column)
			{
				return _Pairs.Contains (new ObjectPairValue<R, C> (row, column, null), Comparer);
			}

			/// <summary>
			/// Finds the index of the given row and column.
			/// </summary>
			/// <returns>The index.</returns>
			/// <param name="row">Row.</param>
			/// <param name="column">Column.</param>
			protected virtual int FindIndex (R row, C column)
			{
				return _Pairs.FindIndex (x => Comparer.Equals (x, new ObjectPairValue<R, C> (row, column, null)));
			}

			protected virtual bool TryGetValue (R row, C column, out object value)
			{
				int index = FindIndex (row, column);
				if (index < 0) {
					value = _defaultValue;
					return false;
				}
				value = _Pairs [index];
				return true;
			}

			protected virtual void AddNewItem (R row, C column)
			{
				AddNewItem (row, column, null);
			}

			protected virtual void AddNewItem (R row, C column, object value)
			{
				_Pairs.Add (new ObjectPairValue<R, C> (row, column, value));
			}

			protected virtual void RemoveItemAtIndex (int index)
			{
				_Pairs.RemoveAt (index);
			}

			public abstract object GetIntersect (R row, C column);

			public abstract void SetIntersect (R row, C column, object value);

			#region IIntersectionValue implementation

			/// <summary>
			/// Gets the value at the intersection of the given row and column.
			/// </summary>
			/// <returns>The intersect.</returns>
			/// <param name="row">Row.</param>
			/// <param name="column">Column.</param>
			public virtual object GetIntersect (object row, object column)
			{
				return GetIntersect ((R)row, (C)column);
			}

			/// <summary>
			/// Sets the value at the intersection of the given row and column.
			/// </summary>
			/// <param name="row">Row.</param>
			/// <param name="column">Column.</param>
			/// <param name="value">Value.</param>
			public virtual void SetIntersect (object row, object column, object value)
			{
				SetIntersect ((R)row, (C)column, value);
			}

			#endregion
		}

		/// <summary>
		/// Intersection between rows and columns yeilding a boolean value.
		/// </summary>
		public class IntersectionBoolean<R, C> : IIntersectionValue
		{
			protected List<ObjectPair<R, C>> _Pairs;

			/// <summary>
			/// Gets or sets the list of pairs.
			/// </summary>
			/// <value>The pairs.</value>
			public List<ObjectPair<R, C>> Pairs {
				get { return _Pairs; }
				set { _Pairs = value; }
			}

			/// <summary>
			/// Adds a new pair.
			/// </summary>
			/// <param name="row">Row.</param>
			/// <param name="column">Column.</param>
			public void AddPair (R row, C column)
			{
				_Pairs.Add (new ObjectPair<R, C> (row, column));
			}

			/// <summary>
			/// Gets or sets the comparer between object pairs.
			/// </summary>
			/// <value>The comparer.</value>
			public IEqualityComparer<ObjectPair<R, C>> Comparer { get; set; }

			/// <summary>
			/// Initializes a new instance of the <see cref="Dataelus.IntersectionBoolean"/> class.
			/// </summary>
			protected IntersectionBoolean ()
			{
				_Pairs = new List<ObjectPair<R, C>> ();
			}

			/// <summary>
			/// Initializes a new instance of the <see cref="Dataelus.IntersectionBoolean"/> class.
			/// </summary>
			/// <param name="comparer">Comparer between row/object pairs.</param>
			public IntersectionBoolean (IEqualityComparer<ObjectPair<R, C>> comparer)
				: this ()
			{
				if (comparer == null)
					throw new ArgumentNullException ("comparer");

				this.Comparer = comparer;
			}

			public IntersectionBoolean (IEqualityComparer<R> rowComparer, IEqualityComparer<C> columnComparer)
				: this (new ObjectPairComparer<R, C> (rowComparer, columnComparer))
			{
			}

			/// <summary>
			/// Gets whether the Pairs contains the specified row and column.
			/// </summary>
			/// <param name="row">Row.</param>
			/// <param name="column">Column.</param>
			protected virtual bool Contains (R row, C column)
			{
				return _Pairs.Contains (new ObjectPair<R, C> (row, column), Comparer);
			}

			/// <summary>
			/// Finds the index of the given row and column.
			/// </summary>
			/// <returns>The index.</returns>
			/// <param name="row">Row.</param>
			/// <param name="column">Column.</param>
			protected virtual int FindIndex (R row, C column)
			{
				return _Pairs.FindIndex (x => Comparer.Equals (x, new ObjectPair<R, C> (row, column)));
			}

			protected virtual void AddNewItem (R row, C column)
			{
				_Pairs.Add (new ObjectPair<R, C> (row, column));
			}

			protected virtual void RemoveItemAtIndex (int index)
			{
				_Pairs.RemoveAt (index);
			}

			#region IIntersectionValue implementation

			/// <summary>
			/// Gets the value at the intersection of the given row and column.
			/// </summary>
			/// <returns>The intersect.</returns>
			/// <param name="row">Row.</param>
			/// <param name="column">Column.</param>
			public virtual object GetIntersect (object row, object column)
			{
				return Contains ((R)row, (C)column);
			}

			/// <summary>
			/// Sets the value at the intersection of the given row and column.
			/// </summary>
			/// <param name="row">Row.</param>
			/// <param name="column">Column.</param>
			/// <param name="value">Value.</param>
			public virtual void SetIntersect (object row, object column, object value)
			{
				if ((bool)value) {
					// True: Add to list (if necessary)
					if (!Contains ((R)row, (C)column)) {
						AddNewItem ((R)row, (C)column);
					}
				} else {
					// False: Remove from list (if necessary)
					int index = FindIndex ((R)row, (C)column);
					if (index >= 0)
						RemoveItemAtIndex (index);
				}
			}

			#endregion
		}

		/// <summary>
		/// Base class of a boolean intersection (just performs casting).
		/// </summary>
		public abstract class IntersectionBooleanBase<R, C> : IIntersectionValue
		{
			protected abstract bool GetIntersect (R row, C column);

			protected abstract void SetIntersect (R row, C column, bool value);

			#region IIntersectionValue implementation

			public object GetIntersect (object row, object column)
			{
				return GetIntersect ((R)row, (C)column);
			}

			public void SetIntersect (object row, object column, object value)
			{
				SetIntersect ((R)row, (C)column, (bool)value);
			}

			#endregion
		}

		/// <summary>
		/// Base class of an integer intersection (just performs casting).
		/// </summary>
		public abstract class IntersectionIntegerBase<R, C> : IIntersectionValue
		{
			protected abstract int GetIntersect (R row, C column);

			protected abstract void SetIntersect (R row, C column, int value);

			#region IIntersectionValue implementation

			public object GetIntersect (object row, object column)
			{
				return GetIntersect ((R)row, (C)column);
			}

			public void SetIntersect (object row, object column, object value)
			{
				SetIntersect ((R)row, (C)column, (int)value);
			}

			#endregion
		}
	}
}

